{"version":3,"sources":["Counters.js","AddCounterForm.js","ConfirmationDelete.jsx","App.js","serviceWorker.js","index.js"],"names":["Counters","props","counter","increment","decrement","remove","className","id","name","onClick","count","AddCounterForm","useState","setName","setCount","type","value","onChange","e","target","class","onSubmit","ConfirmationDelete","isDisabledDeleteConfirmationButton","setIsDisabledDeleteConfirmationButton","Modal","isOpen","Boolean","toggle","onCancel","ModalHeader","ModalBody","FormGroup","Input","placeholder","inputText","trim","toLowerCase","ModalFooter","Button","color","onSuccess","disabled","App","counters","setCounters","confirmCounter","setConfirmCounter","decrementCounter","console","log","newCounters","map","el","incrementCounter","confirmRemoveCounter","reduce","acc","cur","key","Math","random","filter","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc4c98a1.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\n\r\nfunction Counters(props) {\r\n    const {counter, increment, decrement, remove} = props;\r\n\r\n    return (\r\n        <div className='card mb-2' >\r\n            <div className='card-body'>\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col\">\r\n                        ID {counter.id}\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        Counter name {counter.name}\r\n                    </div>\r\n\r\n                    <div className=\"col\">\r\n                    <button className=\"btn btn-secondary\" onClick={() => decrement(counter.id)}>-</button>\r\n\r\n                    <strong>{counter.count}</strong>\r\n\r\n                    <button className=\"btn btn-secondary\" onClick={() => increment(counter.id)}>+</button>\r\n                    </div>\r\n\r\n                    <div className=\"col\">\r\n                    <button className=\"btn btn-danger\" onClick={() => remove(counter)}>Delete\r\n                    </button>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Counters;","import React, {useState} from 'react';\r\n\r\nfunction AddCounterForm(props) {\r\n\r\n    const [name, setName] = useState('---');\r\n    const [count, setCount] = useState(456);\r\n\r\n    const onSubmit = () => {\r\n        props.onSubmit(name, count)\r\n        setName('')\r\n        setCount(0)\r\n    };\r\n\r\n    return (\r\n        <div >\r\n            <input type=\"text\" name='name' value={name}\r\n                   onChange={e => setName(e.target.value)} />\r\n\r\n            <input type=\"number\" name='count' value={count}\r\n                   onChange={e => setCount(e.target.value)} />\r\n\r\n            <button class=\"btn btn-primary\" onClick={onSubmit}>Add</button>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default AddCounterForm;","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  FormGroup,\r\n  Input,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader\r\n} from 'reactstrap';\r\n\r\nexport default function ConfirmationDelete(props) {\r\n  const [isDisabledDeleteConfirmationButton, setIsDisabledDeleteConfirmationButton] = useState(true);\r\n\r\n  const modalConfirmationUserInputChange = (e) => {\r\n    const inputText = e.target.value;\r\n    setIsDisabledDeleteConfirmationButton(inputText.trim().toLowerCase() !== props.name.trim().toLowerCase());\r\n  };\r\n\r\n  const deleteButtonClick = () => {\r\n    setIsDisabledDeleteConfirmationButton(true);\r\n    props.onSuccess();\r\n\r\n  };\r\n\r\n  const cancelButtonClick = () => {\r\n    setIsDisabledDeleteConfirmationButton(true);\r\n    props.onCancel();\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={Boolean(props.name)} toggle={props.onCancel}>\r\n      <ModalHeader>Delete confirmation</ModalHeader>\r\n\r\n      <ModalBody>\r\n\r\n        <p>\r\n          Enter counter name <strong>{props.name}</strong> to\r\n          delete it\r\n        </p>\r\n\r\n        <FormGroup>\r\n          <Input type=\"email\"\r\n                 name=\"email\"\r\n                 id=\"exampleEmail\"\r\n                 placeholder=\"with a placeholder\"\r\n                 onChange={modalConfirmationUserInputChange}\r\n\r\n          />\r\n        </FormGroup>\r\n      </ModalBody>\r\n\r\n      <ModalFooter>\r\n        <Button color=\"danger\"\r\n                onClick={deleteButtonClick}\r\n                disabled={isDisabledDeleteConfirmationButton}>Delete</Button>\r\n\r\n        <Button color=\"secondary\"\r\n                onClick={cancelButtonClick}>Cancel</Button>\r\n      </ModalFooter>\r\n    </Modal>);\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Counters from \"./Counters\";\nimport AddCounterForm from \"./AddCounterForm\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport ConfirmationDelete from \"./ConfirmationDelete\";\n\nfunction App() {\n\n    const InitialCountersState = [\n        {id: 123, name: '1', count: 2},\n        {id: 234, name: '2', count: 5},\n        {id: 345, name: '3', count: 8},\n        {id: 456, name: '4', count: 48},\n    ];\n\n    const [counters, setCounters] = useState(InitialCountersState);\n    const [confirmCounter, setConfirmCounter] = useState({});\n\n    function resetTotalCount() {\n        const newCounters = counters.map(el => ({...el, count: 0}));\n        setCounters(newCounters);\n    }\n\n    function decrementCounter(id) {\n        console.log('DECR ' + id);\n        const newCounters = counters.map(el => (el.id === id) ? {...el, count: el.count - 1} : el);\n        setCounters(newCounters);\n\n    }\n\n    function incrementCounter(id) {\n        const newCounters = counters.map(el => (el.id === id)? {...el, count: el.count + 1} : el);\n        setCounters(newCounters);\n\n    }\n\n    function removeConfirmed() {\n        const newCounters = counters.filter(el => el.id !== confirmCounter.id);\n        setCounters(newCounters);\n        setConfirmCounter({})\n\n    }\n\n    function confirmRemoveCounter(counter) {\n        setConfirmCounter(counter);\n\n    }\n\n    function confirmDeleteCancel(counter) {\n        setConfirmCounter({});\n    }\n\n\n    function addCounter(name, count) {\n\n        const newCounters = [...counters, {\n            id: Math.random(),\n            name,\n            count: count\n        }];\n       setCounters(newCounters);\n\n    }\n\n\n    return (\n        <div className=\"container\">\n            <h1>Counters</h1>\n            Total {counters.reduce((acc, cur) => acc + cur.count, 0)}\n            <button class=\"btn btn-primary\" onClick={resetTotalCount}>Reset Total count</button>\n            <hr/>\n\n            {\n                counters.map(el => <Counters\n                key={el.id}\n                counter={el}\n                increment={incrementCounter}\n                decrement={decrementCounter}\n                remove={confirmRemoveCounter}\n\n\n            />)\n            }\n            <hr/>\n\n            <AddCounterForm onSubmit={addCounter}/>\n\n            <Button color=\"primary\">primary</Button>{' '}\n\n\n            <ConfirmationDelete\n                name={confirmCounter.name}\n                onSuccess={removeConfirmed}\n                onCancel={confirmDeleteCancel}\n            />\n\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}